<?js
const fs=require('fs')
const path=require('path')

const crypto=require('crypto')
function estr(str, key, iv) {
  try{
    key=Buffer.from(key, 'utf8')
    iv=Buffer.from(iv, 'utf8')
    const cipher=crypto.createCipheriv('aes-128-cbc', key, iv)
    return cipher.update(str,'utf8','hex')+cipher.final('hex')
  }catch(e) {console.log(e);return ''}
}
function destr(estr, key, iv) {
  try{
    key=Buffer.from(key, 'utf8')
    iv=Buffer.from(iv, 'utf8')
    const decipher=crypto.createDecipheriv('aes-128-cbc',key,iv)
    return decipher.update(estr,'hex','utf8')+decipher.final('utf8')
  }catch(e) {return ''}
}
function sign(str) {
  return estr(md5(AESKeyIV+str+AESKey)+str, AESKey, AESKeyIV)
}
function unsign(sstr) {
  const ds=destr(sstr, AESKey, AESKeyIV)
  const _str=ds.substr(32)
  const _md5=ds.substr(0, 32)
  if(md5(AESKeyIV+_str+AESKey)!==_md5) return ''
  return _str
}

function build_xq(o) {
  o._=Math.random().toString(36)
  let r=[]
  for(let x in o) {
    r.push(x+'='+encodeURIComponent(o[x]))
  }
  return '/?xq='+sign(r.join('&'))
}

const {xq}=query
const dxq=unsign(xq)
let {task, fdir}=require('querystring').parse(dxq)

task=task||'ls'
fdir=decodeURIComponent(query.fdir||fdir||INIT_DIR)

if(SAFE_DIR) {
  if(path.resolve(fdir).indexOf(path.resolve(SAFE_DIR))!=0) {
    echo(`<meta charset='utf8'><h1>无权访问</h1><a href="${build_xq({fdir: INIT_DIR})}">返回根目录</a>`)
    return
  }
}

function paths2fdir(paths) {
  return encodeURIComponent((SAFE_DIR?path.normalize(SAFE_DIR+'/..')+'/':'')+(paths.join(path.sep)||'/'))
}
function ext(fname) {
  return (fname.replace(/^.*\.([^\.]+$)|^.*$/g, '$1')||'unknown').toUpperCase()
}
function md5(str) {
  return require('crypto').createHash('md5').update(str).digest('hex')
}
function size(m) {
  const l=['b','k','m','g']
  while(m>=1024 && l.length>1) {
    m/=1024
    l.shift()
  }
  return m.toFixed(1)+l[0]
}

if(task==='dl') {
  header('Content-Type', 'application/octet-stream')
  header('Content-Disposition', 'attachment;filename='+encodeURIComponent(path.parse(fdir).base))
  writefile(fdir)
}

if(task==='shell' && SHELL) {
  header('Content-Type', 'text/json')
  echo(await new Promise(r=>{
    const cp=require('child_process')
    cp.exec(query.cmd, {cwd: fdir}, (e, stdout, stderr)=>{
      r(JSON.stringify({stdout, stderr}))
    })
  }))
  return
}

if(task==='rm' && DELETE) {
  header('Content-Type', 'text/json')
  try{
    fs.unlinkSync(fdir)
    echo('Success')
  }catch(e) {
    try{
      fs.rmdirSync(fdir, {recursive: true})
      echo('Success')
    }catch(e) {
      echo('Failed')
    }
  }
  return
}

if(task==='upfile' && UPLOAD) {
  header('Content-Type', 'text/json')
  echo(await new Promise(r=>{
    const {dir, name, ext}=path.parse(query.fn)
    let nfn=i=>`${fdir}/${dir}/${name}${i?'_'+i:''}${ext}`
    for(let i=0; i<1e3; i++) {
      try{
        fs.statSync(nfn(i))
      }catch(e) {
        nfn=nfn(i)
        break
      }
    }
    fs.writeFile(nfn, postbody, (e)=>{
      r(e?e.message:'Success')
    })
  }))
  return
}
if(task==='mkdir' && UPLOAD) {
  header('Content-Type', 'text/json')
  echo(await new Promise(r=>{
    const fn=path.parse(query.mk).base.trim()
    try{
      if(!fn) throw 0
      fs.mkdirSync(fdir+'/'+fn)
      r('Success')
    }catch(e) {
      r('Failed')
    }
  }))
  return
}

if(task==='ls') {
?><meta charset='utf8' />
<style type="text/css">
.list{
  left:0;
  white-space: nowrap;
  width: 100%;
}
.dirn{
    background: #eee;
    position: fixed;
    left: 0;
    top: 0;
    right: 0;
    font-size: 21px;
    padding: 10px;
    z-index: 10;
}
.predir{
  color: #999;
}
.fdird{
  color: #0cf;
}
.cmdarea{
    position: fixed;
    left: 0;
    background: #dcdcdc;
    padding: 5px 5px;
    z-index: 11;
    width: 100%;
    top: 50px;
    bottom: 0;
    overflow: auto;
}
.hidden{
  display: none;
}
.dirn.pos{
  visibility: hidden;
  position: relative;
}
.icon{
    font-size: 12px;
    color: #fff;
    text-align: center;
    width: 25px;
    height: 30px;
    overflow: hidden;
    display: inline-block;
    vertical-align: middle;
    line-height: 30px;
    transform: scale(.6);
    margin-right: 3px;
    border-radius: 9px 0 0 0;
}
[data-fdir]:hover,[data-dl]:hover{
  cursor: pointer;
  color: #3385ff;
  background: #efc01977;
}
.noaccess{
  color: #f33;
  font-size: 12px;
  margin: 10px 0;
}
.dir{
  color: #333;
  font-weight: bold;
  font-size: 17px;
}
.dir.noaccess{
    color: #888;
    font-weight: normal;
    font-size: 12px;
}
.dir,.file{
  line-height: 2;
}
.data{
  font-size: 12px;
  display: inline-block;
  opacity: .8;
  margin: 0 10px;
}
[type=file]{
  display: none;
}
.td-1,.td-2{
  font-size: 12px;
}
.upfile{
    background: #fff;
    display: inline-block;
    font-size: 12px;
    padding: 7px 10px;
    border-radius: 3px;
    margin-right: 5px;
    border: 1px solid #ccc;
    cursor: pointer;
    vertical-align: text-top;
}
</style>
<script type="text/javascript">
document.onclick=function(e) {
  var k=function(v) { return e.target.getAttribute(v)}
  var xq=k('data-fdir') || k('data-dl')
  if(xq) {
    location=xq
    return
  }
  var rm=k('data-rm')
  if(rm) {
    if(!confirm('确认删除 '+k('data-rmfn')+'?')) return;
    xhr(rm, '', function(res) {
      alert(res)
      location.reload()
    })
    return
  }
}
function xhr(url, data, cb) {
  var x=new XMLHttpRequest
  x.open(data?'POST':'GET', url,1)
  x.onreadystatechange=function(){
    if(x.readyState^4) return;
    cb(x.responseText)
  }
  x.send(data)
}
function sendcmd() {
  if(!cmd.value) return
  xhr('<?js echo(build_xq({fdir, task: 'shell'})) ?>&cmd='+cmd.value, '', function(res) {
    var a=JSON.parse(res)
    stdout1.innerHTML=a.stdout||'<i>empty</i>'
    stderr1.innerHTML=a.stderr||'<i>empty</i>'
  })
}
function settype(n) {
  localStorage.setItem('settype', n)
  location.reload()
}
function upfile() {
  var n=new FileReader
  var f0=upf.files[0]
  n.readAsBinaryString(f0)
  n.onload=function(){
    xhr('<?js echo(build_xq({fdir, task: 'upfile'})) ?>&fn='+encodeURIComponent(f0.name), n.result, function(res) {
      alert(res)
      location.reload()
    })
  }
}
function goto1() {
  var dir=prompt('请填写目录')
  if(!dir) return;
  location='<?js echo('/?'+(xq||'')+'&fdir=') ?>'+encodeURIComponent(dir)
}
function mkdir() {
  var dir=prompt('请填写文件夹名')
  if(!dir) return;
  xhr('<?js echo(build_xq({fdir, task: 'mkdir'})) ?>&mk='+encodeURIComponent(dir), '', function(res) {
    alert(res)
    location.reload()
  })
}

</script><?js
}

if(task==='ls') {

  let paths, pre=SAFE_DIR? path.resolve(SAFE_DIR+'/..'): ''
  if(SAFE_DIR) {
    paths=path.resolve(fdir).substr(pre.length).split(path.sep)
  }else paths=path.resolve(fdir+'/').split(path.sep)

  for(let g=0; g<2; g++) {
  echo('<div class="dirn '+(g?'':'pos')+'">')
  if(UPLOAD) echo('<div class="upfile" onclick="upf.click()">上传文件<input onchange="upfile()" type="file" id="'+(g?'':'upf')+'" /></div><div class="upfile" onclick="mkdir()">新建文件夹</div>')
  if(!SAFE_DIR) echo('<div class="upfile" onclick="goto1()">前往</div>')

  echo(`<div class="upfile" id="settype0${g}" onclick="settype(0)">文件列表</div>`)
  SHELL && echo(`<div class="upfile" id="settype1${g}" onclick="settype(1)">shell</div>`)
  echo('<hr />')

  echo(paths.map((r, i)=>{
    return `<span class="fdird" data-fdir="${build_xq({fdir: paths2fdir(paths.slice(0, i+1))})}">${r}</span>`
  }).join('/'))
  echo('</div>')
  }

  echo(`<div class="cmdarea" id='cmdarea'>
    <input id="cmd" /><button onclick="sendcmd()">shell</button>
    <div id="cmd_res">
      <div id="stdout">
        <b>stdout</b>
        <pre id='stdout1'></pre>
      </div>
      <div id="stderr">
        <b>stderr</b>
        <pre id='stderr1'></pre>
      </div>
    </div>
  </div>`)

  let fns=[]
  try{
    let dirs=[], files=[], noaccess=[]
    fs.readdirSync(fdir+'/').map(a=>{
      try{
        const stat=fs.lstatSync(fdir+'/'+a)
        const isDir=stat.isDirectory()
        ; (isDir? dirs: files).push({fn: a, isDir, stat})
      }catch(e) {
        noaccess.push({fn: a, err: 1})
      }
    })
    fns=dirs.sort().concat(files.sort()).concat(noaccess.sort())
  }catch(e) {
    echo('<div class="noaccess">无权访问</div>')
  }
  echo(((logtable)=>{
    return logtable(fns.map(({fn, isDir, stat, err})=>{
      let pfdir=paths2fdir(paths.concat(fn))
      const ret={
        dir: 0,
        file: 0,
        err: 0,
        stat,
        pfdir,
        fn,
      }, f=o=>Object.assign(ret, o)
      if(err) return f({err: 1})
      if(isDir) return f({dir: 1})
      return f({file: 1})
    }).map(({fn, pfdir, dir, file, err, stat})=>{
      const ret={
        filename: '',
        createtime: '',
        modifytime: '',
      }, f=(o, e)=>Object.assign(ret, o, e), d=n=>{
        n=new Date(n)
        let x2=a=>a<10?'0'+a:a
        return [n.getFullYear(), n.getMonth()+1, n.getDate()].map(x2).join('/')+' '+[n.getHours(), n.getMinutes()].map(x2).join(':')
      }
      if(err) return f({filename: `<del class="dir noaccess" data-noaccess>${fn}</del>`})
      const tm={
        createtime: d(stat.birthtime),
        modifytime: d(stat.mtime),
        todo: DELETE? `<div data-rmfn="${fn}" data-rm="${build_xq({fdir: pfdir, task: "rm"})}">删除</div>`: '无',
      }
      if(dir) return f({filename: `<div class="dir" data-fdir="${build_xq({fdir: pfdir})}">${fn}</div>`}, tm)
      return f({filename: `<div class="file" data-dl="${build_xq({fdir: pfdir, task: 'dl'})}">
        <span class="icon" style="background-color: #${md5(ext(fn)).substr(0, 6)}">${ext(fn).substr(0, 2)}</span>${fn}
        <span class="data size">${size(stat.size)}</span>
      </div>`}, tm)
    }).map(o=>{
      const rx={
        filename: '文件名',
        createtime: '创建时间',
        modifytime: '修改时间',
        todo: '操作',
      }
      let ret={}
      for(let g in rx) ret[rx[g]]=o[g]
      return ret
    }), [60,20,20])
  })((data,width)=>{
    let str=`<table class="list" id="list">`
    let d0=data[0]||{}, kk=Object.keys(d0)
    str+=`<thead>`
    kk.map((k, i)=>{
      str+=`<td width="${width[i]}%">${k}</td>`
    })
    str+=`</thead>`
    data.map(d=>{
      str+=`<tr>`
      kk.map((k, i)=>{
        str+=`<td class="td-${i}">${d[k]}</td>`
      })
      str+=`</tr>`
    })
    str+=`</table>`
    return str
  }))
}
?><script type="text/javascript">
if(!(localStorage.settype*1)) {
  cmdarea.className='cmdarea hidden'
  list.className='list'
  settype01.style.display=settype00.style.display='none'
}else{
  cmdarea.className='cmdarea'
  list.className='list hidden'
  settype10.style.display=settype11.style.display='none'
}
</script>